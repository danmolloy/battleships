{"version":3,"sources":["app/hooks.ts","features/Game/gameSlice.tsx","features/Game/setShip.js","features/cpuBoard/cpuShipsSlice.tsx","features/Game/BoardInfo.tsx","features/cpuBoard/CPUShips.tsx","features/playerBoard/CPUMoves.tsx","features/playerBoard/playerShipsSlice.tsx","features/Game/Highscores.tsx/HighScores.tsx","features/Game/InstructionsContent.tsx","features/Game/Instructions.tsx","features/Game/Highscores.tsx/NameForm.tsx","features/Game/Header.tsx","features/playerBoard/PlayerShips.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fetchScores","createAsyncThunk","a","axios","get","response","data","users","addPlayerData","playerData","post","gameSlice","createSlice","name","initialState","inGame","turn","highScores","status","error","reducers","toggleInGame","state","action","payload","setTurn","extraReducers","builder","addCase","pending","fulfilled","rejected","message","user","sort","b","moves","actions","randInt","num","Math","floor","random","setShip","length","currentState","squares","slice","setVerticalShip","setHorizontalShip","verticalCheck","minSquare","maxSquare","i","val","squaresSlice","index","loopCount","arr","push","horizontalCheck","horizonatalIndex","Number","String","CPUSquares","Array","fill","map","id","nanoid","boardSet","numAttacks","cpuShipsSlice","updateSquares","checker","handleAttack","square","find","undefined","resetCPUBoard","getBoard","cpuShips","BoardInfo","props","game","CPUOrPlayer","whoAmI","dispatch","useEffect","shipsArr","alert","includes","attackCount","onClick","showShips","showList","className","CPUShips","useState","showShipsRemaining","setShowShipsRemaining","renderedSquares","squareID","shotSquare","handleClick","fetchMove","board","attackArr","Promise","resolve","setTimeout","targetedAttack","randAttack","nextAttack","shipArr","returnArr","PlayerSquares","currentAttack","CPUMove","AsyncMove","_","thunkAPI","getState","playerShips","playerShipsSlice","setCPUMove","resetPlayerBoard","initialShipCount","HighScores","scores","instructionsContent","Instructions","pageNumber","setPageNumber","split","close","xmlns","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","NameForm","playerName","setPlayerName","playerScore","value","onChange","e","target","hideForm","Header","showInstructions","setShowInstructions","showScores","setShowScores","showForm","setShowForm","button","setButton","currentBoard","window","location","reload","PlayerShips","handleShot","App","store","configureStore","reducer","gameReducer","cpuShipsReducer","playerShipsReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a0425bae.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios';\n\nexport interface GameState {\n  inGame: 'playing' | 'idle'| 'ended'\n  turn: \"CPU\" | \"Player\" | null\n  highScores: any\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\n  error: any\n}\n\nconst initialState: GameState = {\n  inGame: 'idle',\n  turn: null,\n  highScores: null,\n  status: 'idle',\n  error: null\n}\n\nexport const fetchScores = createAsyncThunk(\"/api/get/users\", async () => {\n  const response = await axios.get(\"/api/get/users\")\n  return response.data.users\n})\n\nexport const addPlayerData = createAsyncThunk('/api/post/users', async (playerData: {name: string, moves: number}) => {\n    const response = await axios.post(\"/api/post/users\", playerData)\n    return response.data\n  }\n)\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    toggleInGame: (state, action) => {\n      state.inGame = action.payload\n    },\n    setTurn: state => {\n      if (state.turn === null || \n          state.turn === \"CPU\") {\n        state.turn = 'Player'\n      } else {\n        state.turn = 'CPU'\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchScores.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchScores.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        state.highScores = action.payload\n      })\n      .addCase(fetchScores.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      })\n      .addCase(addPlayerData.fulfilled, (state, action) => {\n        state.highScores = [...state.highScores, action.payload.user].sort((a, b) => a.moves - b.moves)\n      })\n  }\n})\n\nexport const { toggleInGame, setTurn } = gameSlice.actions\nexport default gameSlice.reducer","const randInt = (num) => Math.floor(Math.random() * num)\n\nexport const setShip = (length, currentState) => {\n  let squares = currentState.slice()\n\n  if (randInt(2) === 1) { \n    return setVerticalShip(length, squares)\n  } else { \n    return setHorizontalShip(length, squares)\n  }\n}\n\nconst verticalCheck = (minSquare, maxSquare, squares) => {\n  for (let i = minSquare; i <= maxSquare; i += 10) {\n    if (squares[i].val !== null) {\n      return false;\n    }\n  } \n  return true\n}\n\nconst setVerticalShip = (length, squaresSlice) => {\n  let index = randInt(100 - (length * 10))\n  let loopCount = 0;\n\n  while (loopCount < 50) {  \n    if (index === 0) {\n      if (verticalCheck(0, index + (length * 10), squaresSlice) &&\n        verticalCheck(1, index + (length * 10 + 1), squaresSlice)) {\n          break\n        } else {\n          index = randInt(100 - (length * 10))\n          loopCount =+ 1\n        }\n\n    } else if (index === 9) {\n      if (verticalCheck(9, index + (length * 10), squaresSlice) &&\n      verticalCheck(8, index + (length * 10 - 1), squaresSlice)) {\n        break\n      } else {\n        index = randInt(100 - (length * 10))\n        loopCount =+ 1\n      }\n\n    } else if ((index + (length * 10) - 10) === 99) {\n      if (verticalCheck(index - 10, 99, squaresSlice) &&\n      verticalCheck(index - 11, 98, squaresSlice)) {\n        break;\n      } else {\n        index = randInt(100 - (length * 10))\n        loopCount =+ 1\n      }\n\n    } else if ((index + (length * 10) - 10) === 90) {\n      if (verticalCheck(index - 10, 90, squaresSlice) &&\n      verticalCheck(index - 9, 91, squaresSlice)) {\n        break;\n      } else {\n        index = randInt(100 - (length * 10))\n        loopCount =+ 1\n      }\n\n    } else if ((index + (length * 10)) > 89) {\n      if (verticalCheck(index - 10, index + (length * 10 - 10), squaresSlice) &&\n      verticalCheck(index - 11, index + (length * 10 - 11), squaresSlice) &&\n      verticalCheck(index - 9, index +(length * 10 - 9), squaresSlice)) {\n        break;\n      } else {\n        index = randInt(100 - (length * 10))\n        loopCount =+ 1\n      }\n\n    } else if ((index - 10) < 0) {\n      if (verticalCheck(index, index + (length * 10), squaresSlice) &&\n        verticalCheck(index - 1, index + (length * 10 - 1), squaresSlice) &&\n        verticalCheck(index + 1, index + (length * 10 + 1), squaresSlice)) {\n        break;\n      } else {\n        index = randInt(100 - (length * 10))\n        loopCount =+ 1\n      }\n\n    } else if ((index % 10) === 9) {\n      if (verticalCheck(index - 10, index + (length * 10), squaresSlice) &&\n      verticalCheck(index - 11, index + (length * 10) - 1, squaresSlice)) {\n        break;\n      } else {\n        index = randInt(100 - (length * 10))\n        loopCount =+ 1\n      }\n    } else if ((index % 10) === 0) {\n      if (verticalCheck(index - 10, index + (length * 10), squaresSlice) &&\n      verticalCheck(index - 9, index + (length * 10) + 1, squaresSlice)) {\n        break;\n      } else {\n        index = randInt(100 - (length * 10))\n        loopCount =+ 1\n      }\n    } else {\n      if (verticalCheck((index - 10), (index + (length * 10)), squaresSlice) &&\n        verticalCheck(index - 11, index + (length * 10) - 1, squaresSlice) &&\n        verticalCheck(index - 9, index + 1 + (length * 10), squaresSlice)) {\n        break;\n      } else {\n        index = randInt(100 - (length * 10))\n        loopCount =+ 1\n      }\n    }\n  }  \n  if (loopCount >= 10) {\n    return;\n  } \n\n  let arr = []\n  for (let i = index; i < index + (length * 10); i += 10) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst horizontalCheck = (minSquare, maxSquare, squares) => {\n  \n  for (let i = minSquare; i <= maxSquare; i ++) {\n    if (squares[i].val !== null) {\n      return false;\n    }\n  } \n  return true\n}\n\nconst horizonatalIndex = (length) => {\n  return Number(String(randInt(10)) + String(randInt(10 - length)))\n}\n\nconst setHorizontalShip = (length, squaresSlice) => {\n  let index = horizonatalIndex(length)\n  let loopCount = 0\n\n  while (loopCount < 50) {\n      if (index === 0) {\n        if (horizontalCheck(index, index + length, squaresSlice) && \n          horizontalCheck(index + 10, index + length + 10, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    } else if (index + length - 1 === 9) {\n      if (horizontalCheck(index - 1, index + length - 1, squaresSlice) && \n        horizontalCheck(index + 9, index + length + 9, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    } else if (index + length - 1 === 99) {\n      if (horizontalCheck(index - 1, index + length - 1, squaresSlice) && \n        horizontalCheck(index - 11, index + length - 11, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    } else if (index === 90) {\n      if (horizontalCheck(index, index + length, squaresSlice) && \n        horizontalCheck(index - 10, index + length - 10, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    } else if (index < 9) {\n      if (horizontalCheck(index - 1, index + length, squaresSlice) &&\n        horizontalCheck(index + 9, index + length + 10, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    } else if (index % 10 === 0) {\n      if (horizontalCheck(index, index + length, squaresSlice) && \n        horizontalCheck(index - 10, index + length - 10, squaresSlice) &&\n        horizontalCheck(index + 10, index + length + 10, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    } else if ((index + length - 1) % 10 === 9) {\n      if (horizontalCheck(index - 1, index + length - 1, squaresSlice) && \n        horizontalCheck(index - 11, index + length - 11, squaresSlice) &&\n        horizontalCheck(index + 9, index + length + 9, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    } else if (index > 90) {\n      if (horizontalCheck(index - 1, index + length, squaresSlice) && \n        horizontalCheck(index - 11, index + length - 10, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    } else {\n      if (horizontalCheck(index - 1, index + length, squaresSlice) && \n        horizontalCheck(index - 11, index + length - 10, squaresSlice) &&\n        horizontalCheck(index + 9, index + length + 10, squaresSlice)) {\n          break\n        } else {\n          index = horizonatalIndex(length)\n        }\n    }\n    loopCount ++ \n  }\n\n  let arr = []\n  for (let i = index; i < index + length; i++) {\n    arr.push(i)\n  }\n\n  return arr \n}","import { createSlice, nanoid } from '@reduxjs/toolkit'\nimport type { RootState, AppThunk } from '../../app/store'\nimport { setShip } from '../Game/setShip'\n\nexport interface CPUBoardState {\n  CPUSquares: Array<{val: any, id: any}>,\n  boardSet: boolean,\n  numAttacks: number\n}\n\nconst initialState: CPUBoardState = {\n  CPUSquares: new Array(100).fill(null).map(i => (\n    i = {\n      id: nanoid(),\n      val: null\n    }\n  )),\n  boardSet: false,\n  numAttacks: 0\n}\n\nexport const cpuShipsSlice = createSlice({\n  name: 'cpuShips',\n  initialState,\n  reducers: {\n    updateSquares: (state, action) => {\n      if (action.payload.length === 5) {\n        for (let i=0; i < action.payload.length; i++) {\n          state.CPUSquares[action.payload[i]].val = '(5) Carrier'\n        }\n      } else if (action.payload.length === 4) {\n        for (let i=0; i < action.payload.length; i++) {\n          state.CPUSquares[action.payload[i]].val = '(4) Battleship'\n        }\n      } else if (action.payload.length === 3) {\n        const checker = () => {\n          for (let i = 0; i < state.CPUSquares.length; i++) {\n            if (state.CPUSquares[i].val === \"(3) Submarine\") {\n              return true\n            }\n          } return false\n        }\n        if (checker() === true) {\n          for (let i=0; i < action.payload.length; i++) {\n            state.CPUSquares[action.payload[i]].val = '(3) Destroyer'\n            }\n        } else {\n          for (let i=0; i < action.payload.length; i++) {\n            state.CPUSquares[action.payload[i]].val = '(3) Submarine'\n            }\n        }\n        \n      } else if (action.payload.length === 2) {\n        for (let i=0; i < action.payload.length; i++) {\n          state.CPUSquares[action.payload[i]].val = '(2) PatrolBoat'\n        }\n      }\n    },\n    handleAttack: (state, action) => {\n      const square = state.CPUSquares.find(square => square.id === action.payload)\n      if (square?.val === null) {\n        square.val = 'O'\n      } else if (square?.val !== null && square !== undefined) {\n        square.val = 'X'\n      }\n      state.numAttacks += 1\n    },\n    resetCPUBoard: (state) => {\n      state.CPUSquares = new Array(100).fill(null).map(i => (\n        i = {\n          id: nanoid(),\n          val: null\n        }\n      ))\n    }\n  }\n})\n\n\nconst getBoard = (state: RootState) => state.cpuShips.CPUSquares\n\nexport const setCPUShips = (): AppThunk => (\n  dispatch,\n  getState\n) => {\n  let currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(5, currentBoard)))\n  currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(4, currentBoard)))\n  currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(3, currentBoard)))\n  currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(3, currentBoard)))\n  currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(2, currentBoard)))\n}\n\nexport const { handleAttack, updateSquares, resetCPUBoard } = cpuShipsSlice.actions\nexport default cpuShipsSlice.reducer","import { useEffect } from \"react\"\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport { toggleInGame } from '../Game/gameSlice'\n\nexport const BoardInfo = (props: any) => {\n  const inGame = useAppSelector(state => state.game.inGame)\n  const CPUOrPlayer = props.whoAmI\n  const dispatch = useAppDispatch()\n  \n  useEffect(() => {\n    if (inGame === 'playing' && shipsArr(props.squares).length === 0) {\n      alert(`${CPUOrPlayer} wins`)\n      dispatch(toggleInGame('ended'))\n    }\n  })\n\n  const shipsArr = (squares: any) => {\n    let arr: string[] = []\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i].val !== null &&\n          squares[i].val.length > 1 &&\n          !arr.includes(squares[i].val)\n        ) {\n          arr.push(squares[i].val)\n        }\n    } \n    arr.sort()\n    return arr.map(i => <p>{i}</p>)\n  }  \n\n  return (\n    <div>\n      <p>Attack count: {props.attackCount}</p>\n      <div>\n        <div onClick={() => props.showShips()}>\n          <div>\n            <p>Ships Remaining: {shipsArr(props.squares).length}</p>\n            {props.showList ?\n            <i className=\"up-arrow\"></i>  : \n            <i className=\"down-arrow\"></i>}\n          </div>\n          {props.showList &&\n          shipsArr(props.squares)}\n        </div>\n      </div>\n    </div>\n  )\n}","import { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport { setTurn } from '../Game/gameSlice'\nimport { handleAttack } from './cpuShipsSlice'\nimport { useEffect, useState } from 'react'\nimport { BoardInfo } from '../Game/BoardInfo'\n\nexport const CPUShips = () => {\n  const [showShipsRemaining, setShowShipsRemaining] = useState(true)\n  const squares = useAppSelector(state => state.cpuShips.CPUSquares)\n  const attackCount = useAppSelector(state => state.cpuShips.numAttacks)\n  const turn = useAppSelector(state => state.game.turn)\n  const inGame = useAppSelector(state => state.game.inGame)\n\n  const dispatch = useAppDispatch()\n\n\n  useEffect(() => {\n    if (inGame === 'playing' && \n      shipsArr().length === 0) {\n      alert(\"Player wins\")\n    }\n  }, [])\n\n  const handleClick = (squareID: string) => {\n    let shotSquare = squares.find(i => i.id === squareID)\n    if (turn !== \"Player\" || \n      shotSquare?.val === 'O' ||\n      shotSquare?.val === 'X' ||\n      inGame !== 'playing') {\n      return;\n    } else {\n      dispatch(handleAttack(squareID))\n      dispatch(setTurn())\n    }\n  }\n\n  const renderedSquares = squares.map(i => \n    <div \n    key={i.id} \n    className={i.val === \"X\" ? \"square-hit\": i.val === \"O\" ? \"square\" :\"square hover:bg-blue-500\"} \n    onClick={() => handleClick(i.id)}\n    >\n      {i.val === null ? null : i.val.length > 1 ? null : i.val}\n    </div>\n    )\n  \n  const shipsArr = () => {\n    let arr: string[] = []\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i].val !== null &&\n          squares[i].val.length > 1 &&\n          !arr.includes(squares[i].val)\n        ) {\n          arr.push(squares[i].val)\n        }\n    } \n    arr.sort()\n    return arr.map(i => <p>{i}</p>)\n  }  \n\n \n  return (\n    <div className=\"outer-board pb-1\" id=\"cpu-ships\">\n      <h3>CPU Ships</h3>\n      <div className=\"inner-board\">\n        {renderedSquares}\n      </div>\n      {turn !== null && \n      <BoardInfo \n        attackCount={attackCount} \n        showShipsRemaining={showShipsRemaining}\n        squares={squares.slice()}\n        showList={showShipsRemaining}\n        showShips={() => setShowShipsRemaining(!showShipsRemaining)}\n        whoAmI=\"Player\"\n      />}\n    </div>\n  )\n}\n\nfunction i(i: any, arg1: (index: any) => JSX.Element) {\n  throw new Error('Function not implemented.')\n}\n","export const fetchMove = (board: Array<{val: any, id: any}>, attackArr: number[]) => {\n  if (attackArr.length > 0) {\n    return new Promise<{ data: number }>((resolve) => \n    setTimeout(() => resolve({ data: targetedAttack(board, attackArr)}), 500)\n  );\n  } else {\n    return new Promise<{ data: number }>((resolve) => \n    setTimeout(() => resolve({ data: randAttack(board)}), 1000)\n  );\n  }\n}\n\nconst randAttack = (board: Array<{val: any, id: any}>) => {\n  let square = Math.floor(Math.random() * 100);\n  while (board[square].val === 'O' || \n    board[square].val === 'X') {\n    square = Math.floor(Math.random() * 100);\n  }\n  return square\n}\n\nconst targetedAttack = (board: Array<{val: any, id: any}>, attackArr: Array<number>) => {\n  let loopCount = 0;\n  if (attackArr.length === 1) {\n    let square = attackArr[0]\n    let nextAttack = Math.floor(Math.random() * 4)\n    while (loopCount < 10) {\n      if (nextAttack === 0) { // North\n        if (board[square - 10].val !== 'O' && \n          board[square - 10].val !== 'X' && \n          square - 10 >= 0) {\n          return square - 10\n        } \n      } else if (nextAttack === 1) { // East\n        if (board[square + 1].val !== 'O' && \n        board[square + 1].val !== 'X' &&\n        square % 10 !== 0) {\n          return square + 1\n        } \n      } else if (nextAttack === 2) { // South\n        if (board[square + 10].val !== 'O' && \n        board[square + 10].val !== 'X' &&\n        square <= 99) {\n          return square + 10\n        } \n      } else if (nextAttack === 3) { // West\n        if (board[square - 1].val !== 'O' && \n        board[square - 1].val !== 'X' &&\n        square % 10 !== 9) {\n          return square - 1\n        } \n      }\n      nextAttack = Math.floor(Math.random() * 4)\n      loopCount++\n    }\n  } else {\n    while (loopCount < 10) {\n      loopCount++\n      if (attackArr[1] - attackArr[0] === 10) { \n        let nextAttack = attackArr[attackArr.length - 1] + 10 // South\n        if (board[nextAttack].val !== 'O' && \n        board[nextAttack].val !== 'X' &&\n        nextAttack <= 99) {\n          return nextAttack\n        } else { // North\n          return attackArr[0] - 10;\n        } \n      } else {\n        let nextAttack = attackArr[attackArr.length - 1] + 1\n        if (board[nextAttack].val !== 'O' && \n        board[nextAttack].val !== 'X' &&\n        nextAttack % 10 !== 10) {\n          return nextAttack\n        } else {\n          return attackArr[0] - 1;\n        } \n      } \n    }\n  }\n  return 1;\n}","import { createAsyncThunk, createSlice, nanoid } from '@reduxjs/toolkit'\nimport type { RootState, AppThunk } from '../../app/store'\nimport { setShip } from '../Game/setShip'\nimport { BoardInfo } from '../Game/BoardInfo'\nimport { fetchMove } from './CPUMoves'\n\nconst shipArr = (arr: Array<{val: any, id: any}>) => {\n  let returnArr: Array<string> = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].val !== null && \n      arr[i].val.length > 1 && \n      !returnArr.includes(arr[i].val)) {\n        returnArr.push(arr[i].val)\n      }\n  } return returnArr;\n}\n\n\nexport interface PlayerBoardState {\n  PlayerSquares: Array<{val: any, id: any}>,\n  boardSet: boolean,\n  numAttacks: number,\n  currentAttack: number[],\n  CPUMove: 'idle'|'thinking' | 'complete',\n}\n\nconst initialState: PlayerBoardState = {\n  PlayerSquares: new Array(100).fill(null).map(i => (\n    i = {\n      id: nanoid(),\n      val: null\n    }\n  )),\n  boardSet: false,\n  numAttacks: 0,\n  currentAttack: [],\n  CPUMove: 'idle'\n}\n\nexport const AsyncMove = createAsyncThunk(\n  'playerShips/fetchMove',\n  async (_, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState\n    const attackArr = state.playerShips.currentAttack\n    const board = state.playerShips.PlayerSquares\n    const response = await fetchMove(board, attackArr);\n    return response.data\n  }\n)\n\nexport const playerShipsSlice = createSlice({\n  name: 'playerShips',\n  initialState,\n  reducers: {\n    updateSquares: (state, action) => {\n      if (action.payload.length === 5) {\n        for (let i=0; i < action.payload.length; i++) {\n          state.PlayerSquares[action.payload[i]].val = '(5) Carrier'\n        }\n      } else if (action.payload.length === 4) {\n        for (let i=0; i < action.payload.length; i++) {\n          state.PlayerSquares[action.payload[i]].val = '(4) BattleShip'\n        }\n      } else if (action.payload.length === 3) {\n        const checker = () => {\n          for (let i = 0; i < state.PlayerSquares.length; i++) {\n            if (state.PlayerSquares[i].val === \"(3) Submarine\") {\n              return true\n            }\n          } return false\n        }\n        if (checker() === true) {\n          for (let i=0; i < action.payload.length; i++) {\n            state.PlayerSquares[action.payload[i]].val = '(3) Destroyer'\n            }\n        } else {\n          for (let i=0; i < action.payload.length; i++) {\n            state.PlayerSquares[action.payload[i]].val = '(3) Submarine'\n            }\n        }\n      } else if (action.payload.length === 2) {\n        for (let i=0; i < action.payload.length; i++) {\n          state.PlayerSquares[action.payload[i]].val = '(2) PatrolBoat'\n        }\n      }\n    },\n    setCPUMove: (state, action) => {\n      state.CPUMove = action.payload\n    },\n    resetPlayerBoard: (state) => {\n      state.PlayerSquares = new Array(100).fill(null).map(i => (\n        i = {\n          id: nanoid(),\n          val: null\n        }\n      ))\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(AsyncMove.pending, (state) => {\n        state.CPUMove = 'thinking';\n      })\n      .addCase(AsyncMove.fulfilled, (state, action) => {\n        const initialShipCount = shipArr(state.PlayerSquares)\n        const square = action.payload\n        if (state.PlayerSquares[square].val !== null) {\n          state.PlayerSquares[square].val = 'X'\n          if (shipArr(state.PlayerSquares).length === initialShipCount.length) {\n            state.currentAttack.push(square);\n            state.currentAttack.sort()\n          } else {\n            state.currentAttack = []\n          }\n        } else {\n          state.PlayerSquares[square].val = 'O'\n        }\n        state.numAttacks += 1\n        state.CPUMove = 'complete';\n      })\n  }\n})\n\nconst getBoard = (state: RootState) => state.playerShips.PlayerSquares\n\nexport const setPlayerShips = (): AppThunk => (\n  dispatch,\n  getState\n) => {\n  let currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(5, currentBoard)))\n  currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(4, currentBoard)))\n  currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(3, currentBoard)))\n  currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(3, currentBoard)))\n  currentBoard = getBoard(getState())\n  dispatch(updateSquares(setShip(2, currentBoard)))\n}\n\nexport const { updateSquares, setCPUMove, resetPlayerBoard }  = playerShipsSlice.actions\nexport default playerShipsSlice.reducer","import { useAppSelector } from '../../../app/hooks'\n\n\nexport const HighScores = () => {\n\n  const scores = useAppSelector(state => state.game.highScores)\n\n\n  return (\n    <div className=\"flex flex-col m-4\">\n      <table>\n       <tr>\n         <th>Name</th>\n         <th>Moves</th>\n       </tr>\n       {scores && scores.map((i: any) => \n        <tr key={i.id} >\n          <td className=\"p-2 border-r\">{i.name}</td>\n          <td className=\"p-2\">{i.moves}</td>\n        </tr>)}\n      </table>\n    </div>\n  )\n}","export const instructionsContent = [\n  `The aim of Battleships is to sink all of your opponents ships before they sink yours.`,\n  `There are two 10 * 10 boards which represent a space of ocean. \\n\n  One contains your ships, the other contains your opponent's.`,\n  `Parts of a ship are represented with a • \\n\n  There are small ships •• \\n\n  And large ships ••••• \\n \n  And ships in between.`,\n  `Upon clicking Start, the boards are both rendered with following ships: \\n\n  1 x Carrier (•••••) \\n\n  1 x Battleship (••••) \\n\n  1 x Destroyer (•••) \\n\n  1 x Submarine (•••) \\n\n  1 x Patrol Boat (••) \\n\n  Each player can only see their own ships.`,\n  `Players take turns attacking their opponents board, attempting to hit a ship. \\n\n  A hit is represented by X, a miss is O.`,\n  `If you hit, try the squares around that square to sink the entire ship. \\n\n  The ships may be horizontal or vertical. They cannot be touching another ship (including a diagonal square). \\n\n  You can see the ships remaining for both players, and will be notified when you sink one.`\n]\n\n","import { useState } from \"react\"\nimport { instructionsContent } from \"./InstructionsContent\"\n\nexport const Instructions = (props: any) => {\n  const [pageNumber, setPageNumber] = useState(1)\n\n  const handleClick = () => {\n    pageNumber < instructionsContent.length\n    ? setPageNumber(pageNumber + 1)\n    : props.close()\n  }\n\n  return (\n    <div className=\"flex flex-col border inset-auto w-4/5 md:w-1/2 bg-white fixed text-left h-auto -mt-4 shadow\">\n      <div className=\"flex flex-row items-end self-end w-full p-2\">\n        <h2 className=\"self-center w-3/4\">Instructions</h2>\n        <p className=\"w-1/4\">{`${pageNumber}/${instructionsContent.length}`}</p>\n      </div>\n      <div className=\"my-4\">\n      {instructionsContent[pageNumber - 1].split('\\n').map((i: any) => \n      <p className=\"p-2\">{i}</p>)}\n      </div>\n      <div className=\"flex flex-row justify-end w-full\">\n        <button onClick={() => handleClick()} className=\"self-end text-blue-500 hover:text-blue-700\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  )\n}","import { useState } from \"react\"\nimport { useAppSelector, useAppDispatch } from '../../../app/hooks'\nimport { addPlayerData } from '../../Game/gameSlice'\n\n\nexport const NameForm = (props: any) => {\n  const [playerName, setPlayerName] = useState(\"\")\n\n  const dispatch = useAppDispatch()\n  const playerScore = useAppSelector(state => state.cpuShips.numAttacks)\n\n  const handleClick = () => {\n    dispatch(addPlayerData({name: playerName, moves: playerScore}))\n    props.hideForm();\n  }\n\n  return (\n    <div>\n        <label>Your name:</label>\n        <input className=\"border px-1\" value={playerName} onChange={(e) => setPlayerName(e.target.value)}/>\n        <button className=\"py-2 px-4 bg-gray-200 w-36\n        text-gray-600 font-semibold rounded-lg \n        shadow-md hover:bg-gray-300 focus:outline-none \n        focus:ring-2 focus:ring-gray-500 focus:ring-opacity-75 m-1\" onClick={() => handleClick()}>Submit</button>\n      </div>\n  )\n}","import { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport { toggleInGame, setTurn, fetchScores } from './gameSlice'\nimport { useState, useEffect } from 'react'\nimport { setPlayerShips, resetPlayerBoard } from '../playerBoard/playerShipsSlice'\nimport { setCPUShips, resetCPUBoard } from '../cpuBoard/cpuShipsSlice'\nimport { HighScores } from './Highscores.tsx/HighScores'\nimport { Instructions } from './Instructions'\nimport { NameForm } from './Highscores.tsx/NameForm'\n\nexport const Header = () => {\n  const [showInstructions, setShowInstructions] = useState(false)\n  const [showScores, setShowScores] = useState(false)\n  const [showForm, setShowForm] = useState(false)\n  const [button, setButton] = useState('Start')\n\n  const turn = useAppSelector(state => state.game.turn)\n  const inGame = useAppSelector(state => state.game.inGame)\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (inGame === 'ended') {\n      setShowScores(true)\n      setButton('Reset')\n      setShowForm(true)\n    } else if (inGame === 'playing') {\n      setButton('Reset')\n    } else if (inGame === 'idle') {\n      setButton('Start')\n    }\n  }, [inGame])\n\n  const handleClick = () => {\n    if (inGame === 'idle') {\n      dispatch(setCPUShips())\n      dispatch(setPlayerShips())\n      dispatch(setTurn())\n      dispatch(toggleInGame('playing'))\n    } else if (inGame === 'playing') {\n      window.location.reload()\n    } else if (inGame === 'ended') {\n      dispatch(resetCPUBoard())\n      dispatch(resetPlayerBoard())\n      dispatch(toggleInGame('idle'))\n      setShowScores(false)\n    }\n  }\n\n  const getScores = () => {\n    setShowScores(!showScores)\n    dispatch(fetchScores()) \n  }\n\n  return (\n    <div className=\"header m-3\" id=\"header\">\n        <h1 id=\"title\" className=\"p-4\">{inGame === 'ended' || inGame === 'idle' ? \"Battleships\" :`${turn} turn`}</h1>\n\n      <div className=\"flex flex-row items-center\">\n      <button id=\"status-btn\" \n      className=\"py-2 px-4 bg-green-500  w-36\n        text-white font-semibold rounded-lg \n        shadow-md hover:bg-green-600 focus:outline-none \n        focus:ring-2 focus:ring-green-400 focus:ring-opacity-75 m-1\"\n        onClick={handleClick}\n      >\n        {button}\n      </button>\n      <button onClick={() => setShowInstructions(!showInstructions)} className=\"py-2 px-4 bg-blue-500 \n      text-white font-semibold rounded-lg w-36\n      shadow-md hover:bg-blue-600 focus:outline-none \n      focus:ring-2 focus:ring-gray-500 focus:ring-opacity-75 m-1\">\n        Instructions\n      </button>\n      <button\n      className=\"py-2 px-4 bg-gray-200 w-36\n      text-gray-600 font-semibold rounded-lg \n      shadow-md hover:bg-gray-300 focus:outline-none \n      focus:ring-2 focus:ring-gray-500 focus:ring-opacity-75 m-1\"\n      onClick={() => getScores()}\n      >\n        High Scores\n      </button>\n      </div>\n      {showInstructions &&\n      <Instructions close={() => setShowInstructions(false)}/>}\n      {showScores &&<HighScores />}\n      {showForm && <NameForm hideForm={() => setShowForm(false)}/>}\n    </div>\n  )\n}","import { useEffect, useState } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport { RootState } from '../../app/store'\nimport { AsyncMove, setCPUMove } from './playerShipsSlice'\nimport { setTurn } from '../Game/gameSlice'\nimport { BoardInfo } from '../Game/BoardInfo'\n\nexport const PlayerShips = () => {\n  const [showShipsRemaining, setShowShipsRemaining] = useState(true)\n\n  const squares = useAppSelector((state: RootState) => state.playerShips.PlayerSquares)\n  const attackCount = useAppSelector((state: RootState) => state.playerShips.numAttacks)\n  const turn = useAppSelector((state: RootState) => state.game.turn)\n  const CPUMove = useAppSelector((state: RootState) => state.playerShips.CPUMove)\n  const inGame = useAppSelector((state: RootState) => state.game.inGame)\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (turn === \"CPU\" && CPUMove === \"idle\" && inGame === \"playing\") {\n      handleShot()      \n    } else if (CPUMove === \"complete\") {\n      dispatch(setCPUMove('idle'))\n    }\n  })\n\n\n  const renderedSquares = squares.map(i => \n    <div key={i.id} \n    className={i.val === \"X\" ? \"square-hit\" :\"square\"}>\n      {i.val === null ? null : i.val.length > 1 ? \"•\" : i.val}\n    </div>\n    )\n\n  const handleShot = async() => {\n    if (turn !== \"CPU\") {\n      return;\n    }\n      await(dispatch(AsyncMove()))\n      dispatch(setTurn())\n  }\n\n  return (\n    <div className=\"outer-board pb-1\" id=\"player-ships\">\n      <h3>Player Ships</h3>\n      <div className=\"inner-board\">\n        {renderedSquares}\n      </div>\n      {turn !== null && <BoardInfo \n        attackCount={attackCount} \n        showShipsRemaining={showShipsRemaining}\n        squares={squares.slice()}\n        showList={showShipsRemaining}\n        showShips={() => setShowShipsRemaining(!showShipsRemaining)}\n        whoAmI=\"CPU\"\n      />}\n    </div>\n  )\n}","import './App.css';\nimport { CPUShips } from './features/cpuBoard/CPUShips';\nimport { Header } from './features/Game/Header'\nimport { PlayerShips } from './features/playerBoard/PlayerShips';\n\nfunction App() {\n\n  return (\n    <div \n    className=\"flex flex-col justify-center items-center text-center\"\n    >\n      <Header />\n      <div className=\"flex flex-col sm:flex-row items-start\">\n      <CPUShips />\n      <PlayerShips />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport cpuShipsReducer from '../features/cpuBoard/cpuShipsSlice'\nimport playerShipsReducer from '../features/playerBoard/playerShipsSlice'\nimport gameReducer from '../features/Game/gameSlice'\n\nexport const store = configureStore({\n  reducer: {\n    game: gameReducer,\n    cpuShips: cpuShipsReducer,\n    playerShips: playerShipsReducer\n  }\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { makeServer } from \"./Server.js\"\n\nif (process.env.NODE_ENV === \"development\") {\n  makeServer({ environment: \"development\" })\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}